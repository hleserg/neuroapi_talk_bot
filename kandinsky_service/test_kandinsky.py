#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Kandinsky —Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import httpx
import time
from pathlib import Path

KANDINSKY_URL = "http://localhost:8002"

async def test_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{KANDINSKY_URL}/health")
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {data}")
            return data.get("status") == "healthy" and data.get("models_loaded", False)
            
    except httpx.RequestError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    except httpx.HTTPStatusError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
        return False

async def test_image_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    test_prompts = [
        "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏",
        "–∫–æ—Ç–µ–Ω–æ–∫ –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–∏–∫–æ–º",
        "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥",
        "—Ü–≤–µ—Ç–æ—á–Ω–æ–µ –ø–æ–ª–µ –≤–µ—Å–Ω–æ–π"
    ]
    
    for i, prompt in enumerate(test_prompts):
        print(f"üñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/4: {prompt}")
        
        payload = {
            "prompt": prompt,
            "negative_prompt": "low quality, blurry",
            "width": 512,  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            "height": 512,
            "num_inference_steps": 25,  # –ú–µ–Ω—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            "guidance_scale": 4.0
        }
        
        start_time = time.time()
        
        try:
            async with httpx.AsyncClient(timeout=120.0) as client:
                response = await client.post(
                    f"{KANDINSKY_URL}/generate",
                    json=payload
                )
                response.raise_for_status()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                output_path = Path(f"test_image_{i+1}.png")
                output_path.write_bytes(response.content)
                
                elapsed = time.time() - start_time
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {elapsed:.1f}—Å: {output_path}")
                
        except httpx.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        except httpx.HTTPStatusError as e:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def test_service_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ"""
    print("‚ÑπÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ...")
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{KANDINSKY_URL}/")
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ: {data}")
            
    except httpx.RequestError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    except httpx.HTTPStatusError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Kandinsky —Å–µ—Ä–≤–∏—Å–∞\n")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    health_ok = await test_health()
    print()
    
    if not health_ok:
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs kandinsky-service")
        return
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
    await test_service_info()
    print()
    
    # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await test_image_generation()
    print()
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ test_image_*.png")

if __name__ == "__main__":
    asyncio.run(main())
